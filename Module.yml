# MindTouch Î»#
# Copyright (C) 2018-2019 MindTouch, Inc.
# www.mindtouch.com  oss@mindtouch.com
#
# For community documentation and downloads visit mindtouch.com;
# please review the licensing section.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Module: LambdaSharp.Demo.WebSocketsChat
Using:

  - Module: LambdaSharp.S3.IO:0.5

Items:

  # Connection Table
  - Resource: ConnectionsTable
    Scope: all
    Type: AWS::DynamoDB::Table
    Allow: ReadWrite
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ConnectionId
          AttributeType: S
      KeySchema:
        - AttributeName: ConnectionId
          KeyType: HASH

  - Resource: WebSocketApi
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName} Module WebSocket API"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  - Resource: WebSocketDeployment
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref WebSocketApi
    DependsOn:
      - Connect::Route
      - Action::Route
      - Disconnect::Route

  - Resource: WebSocketStage
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: LATEST
      Description: LATEST Stage
      DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref WebSocketApi

  - Namespace: Connect
    Items:

    - Resource: Route
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref WebSocketApi
        RouteKey: $connect
        AuthorizationType: NONE
        OperationName: ConnectRoute
        Target: !Sub "integrations/${Connect::Integration}"

    - Resource: Integration
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref WebSocketApi
        Description: Connect Integration
        IntegrationType: AWS_PROXY
        IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Connect::OnConnectFunction.Arn}/invocations"

    - Function: OnConnectFunction
      Memory: 256
      Timeout: 30

    - Resource: Permission
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref Connect::OnConnectFunction
        Principal: apigateway.amazonaws.com

  - Namespace: Disconnect
    Items:

    - Resource: Route
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref WebSocketApi
        RouteKey: $disconnect
        AuthorizationType: NONE
        OperationName: DisconnectRoute
        Target: !Sub "integrations/${Disconnect::Integration}"

    - Resource: Integration
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref WebSocketApi
        Description: Disconnect Integration
        IntegrationType: AWS_PROXY
        IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Disconnect::OnDisconnectFunction.Arn}/invocations"

    - Function: OnDisconnectFunction
      Memory: 256
      Timeout: 30

    - Resource: Permission
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref Disconnect::OnDisconnectFunction
        Principal: apigateway.amazonaws.com

  - Namespace: Action
    Items:

    - Resource: Route
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref WebSocketApi
        RouteKey: $default
        AuthorizationType: NONE
        OperationName: SendRoute
        Target: !Sub "integrations/${Action::Integration}"

    - Resource: Integration
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref WebSocketApi
        Description: Send Integration
        IntegrationType: AWS_PROXY
        IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Action::OnActionFunction.Arn}/invocations"

    - Resource: ApiGatewayPermissions
      Allow: execute-api:ManageConnections
      Value: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/LATEST/POST/@connections/*

    - Function: OnActionFunction
      Memory: 256
      Timeout: 30

    - Resource: Permission
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref Action::OnActionFunction
        Principal: apigateway.amazonaws.com

  # Write the site configuration settings to a JSON file in the S3 bucket
  - Resource: WebsiteConfigJson
    Type: LambdaSharp::S3::WriteJson
    Properties:
      Bucket: !Ref WebsiteBucket
      Key: config.json
      Contents:
        server: !Ref WebSocketUrl

  # Create bucket to host website
  - Resource: WebsiteBucket
    Description: S3 bucket for hosting website assets
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html

  - Resource: WebsiteBucketPolicy
    Description: Public access policy
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: WebsiteBucket
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "${WebsiteBucket.Arn}/*"
      Bucket: !Ref WebsiteBucket
    DependsOn: DeployWebsiteFiles

  - Package: WebsiteFiles
    Description: Website files to deploy
    Files: wwwroot/

  - Resource: DeployWebsiteFiles
    Type: LambdaSharp::S3::Unzip
    Properties:
      SourceBucket: !Ref DeploymentBucketName
      SourceKey: !Ref WebsiteFiles
      DestinationBucket: !Ref WebsiteBucket
      DestinationKey: ""

  - Resource: WebsiteCloudfront
    Description: Cloudfront distribution for https:// web access to the S3 bucket
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - WebsiteBucket
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to Webchat S3 bucket
        Origins:
          - DomainName: !GetAtt WebsiteBucket.DomainName
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 0
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          MinTTL: 0
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100

  # Export website url
  - Variable: WebsiteUrl
    Description: Website URL
    Scope: public
    # Value: !GetAtt WebsiteBucket.WebsiteURL
    Value: !Sub "https://${WebsiteCloudfront.DomainName}/"

  - Variable: WebSocketUrl
    Description: WebSocket URL
    Scope: public
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketStage}"