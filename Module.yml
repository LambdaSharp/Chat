# LambdaSharp (Î»#)
# Copyright (C) 2018-2020
# lambdasharp.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Module: Demo.WebSocketsChat
Pragmas:
  - Overrides:
      Module::WebSocket.RouteSelectionExpression: $request.body.Action
      Module::WebSocket::StageName: socket
Using:
  - Module: LambdaSharp.S3.IO@lambdasharp
Items:

  # Connection Table
  - Resource: DataTable
    Scope: all
    Type: AWS::DynamoDB::Table
    Allow: ReadWrite
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S

        - AttributeName: SK
          AttributeType: S

        - AttributeName: GS1PK
          AttributeType: S

        - AttributeName: GS1SK
          AttributeType: S

      KeySchema:
        - AttributeName: PK
          KeyType: HASH

        - AttributeName: SK
          KeyType: RANGE

      GlobalSecondaryIndexes:
        - IndexName: GS1
          KeySchema:
            - AttributeName: GS1PK
              KeyType: HASH

            - AttributeName: GS1SK
              KeyType: RANGE

          Projection:
            ProjectionType: ALL

  # Function for handling web-socket requests
  - Function: ChatFunction
    Description: Handle web-socket messages
    Memory: 256
    Timeout: 30
    Sources:
      - WebSocket: $connect
        Invoke: OpenConnection
        AuthorizationType: CUSTOM
        AuthorizerId: !Ref JwtAuthorizer

      - WebSocket: $disconnect
        Invoke: CloseConnection

      - WebSocket: send
        Invoke: SendMessage

      - WebSocket: rename
        Invoke : RenameUser

  # Function for sending response to web-sockets
  - Function: NotifyFunction
    Description: Notify all web-sockets
    Memory: 256
    Timeout: 30
    Sources:
      - Sqs: NotifyQueue

  - Resource: NotifyQueue
    Scope: all
    Type: AWS::SQS::Queue
    Allow: Send,Receive

  # Bucket to host website
  - Resource: WebsiteBucket
    Description: S3 bucket for hosting website assets
    Type: AWS::S3::Bucket

  - Resource: WebsiteBucketPolicy
    Description: CloudFront-only access policy
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: WebsiteBucket
        Version: 2012-10-17
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${WebsiteCloudFrontIdentity}"
            Action: s3:GetObject
            Resource: !Sub "${WebsiteBucket.Arn}/*"
      Bucket: !Ref WebsiteBucket
    DependsOn: DeployWebsiteFiles

  # Publish Blazor WebAssembly app into a folder and compress into a zip package
  - Package: WebsiteFiles
    Build: dotnet publish -c Release BlazorWebSocket -p:BlazorEnableCompression=false
    Files: BlazorWebSocket/bin/Release/netstandard2.1/publish/wwwroot/

  # Copy Blazor WebAssembly files to S3 bucket with Brotli encoding
  - Resource: DeployWebsiteFiles
    Type: LambdaSharp::S3::Unzip
    Properties:
      SourceBucket: !Ref DeploymentBucketName
      SourceKey: !Ref WebsiteFiles
      DestinationBucket: !Ref WebsiteBucket
      DestinationKey: ""
      Encoding: BROTLI

  # Create CloudFront distribution mapped to S3 bucket and WebSocket APIGateway
  - Resource: WebsiteCloudFront
    DependsOn: WebsiteBucketPolicy
    Description: CloudFront distribution for https:// web access to the S3 bucket
    Type: AWS::CloudFront::Distribution
    Scope: InvalidateCloudFrontFunction
    Properties:
      DistributionConfig:
        Comment: !Sub "CloudFront Distribution for WebChat app (${AWS::StackName})"
        Enabled: true
        HttpVersion: http2
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${WebsiteCloudFrontIdentity}"

          - Id: WebSocket
            DomainName: !Ref Module::WebSocket::DomainName
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only

        DefaultCacheBehavior:
          AllowedMethods: [ "GET", "HEAD" ]
          Compress: true
          DefaultTTL: 2592000 # 30 days
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https

        CacheBehaviors:
          - TargetOriginId: WebSocket
            PathPattern: !Ref Module::WebSocket::StageName
            AllowedMethods: [ "GET", "HEAD" ]
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization
            ViewerProtocolPolicy: https-only

  - Resource: WebsiteCloudFrontPermissions
    Allow: cloudfront:CreateInvalidation
    Value: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteCloudFront}"

  - Resource: WebsiteCloudFrontIdentity
    Description: CloudFront Origin Identity for authenticating distribution with the S3 bucket
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "CloudFront Identity used by ${Module::Id}"

  - Function: InvalidateCloudFrontFunction
    Description: Invoked by S3 when files change in the website bucket so they can be invalidated in the CloudFront cache
    Memory: 256
    Timeout: 30
    Sources:
      - S3: WebsiteBucket
        Events:
          - s3:ObjectCreated:*
          - s3:ObjectRemoved:*

  # Cognito User Pool Information (TODO: don't use hardcoded values!)
  - Variable: WebsiteLoginUrl
    Value: !Sub "https://${WebsiteCloudFront.DomainName}/login"

  - Group: Cognito
    Items: !Include Cognito.yml

  # WebSocket Authorization
  - Resource: JwtAuthorizer
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: JwtAuthorizer
      ApiId: !Ref Module::WebSocket
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JwtAuthorizerFunction.Arn}/invocations"
      AuthorizerCredentialsArn: !GetAtt JwtAuthorizerRole.Arn
      IdentitySource:
        #- route.request.header.Authorization
        - route.request.querystring.id_token

  - Resource: JwtAuthorizerRole
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:invokeFunction
                Resource: !GetAtt JwtAuthorizerFunction.Arn

  - Resource: JwtAuthorizerPermission
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt JwtAuthorizerFunction.Arn
      Principal: !Sub "apigateway.${AWS::URLSuffix}"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Module::WebSocket}/${Module::WebSocket::StageName}/$connect"

  - Function: JwtAuthorizerFunction
    Description: Authorize WebSocket connection using JWT
    Memory: 256
    Timeout: 30
    Environment:
      Issuer: !Ref Cognito::Issuer
      Audience: !Ref Cognito::ClientId

  # Initialize DataTable with minimal records
  - Function: Finalizer
    Description: Initialize DynamoDB table with default rows
    Memory: 256
    Timeout: 30

  # Export website url
  - Variable: WebsiteUrl
    Description: Website URL
    Scope: public
    Value: !Sub "https://${WebsiteCloudFront.DomainName}/"

  - Variable: WebSocketUrl
    Description: WebSocket URL
    Scope: public
    Value: !Sub "https://${WebsiteCloudFront.DomainName}/socket"
