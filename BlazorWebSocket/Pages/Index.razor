@page "/"

@using System.Net.WebSockets
@using Demo.WebSocketsChat.Common

@implements IDisposable

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@if(_websocketDispatch.State == WebSocketState.Open) {
    <form @onsubmit="RenameUserAsync">
        <label for="userName" class="col-sm-3 col-form-label">User Name</label>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1">ðŸ¤“</span>
            </div>
            <input type="text" class="form-control" aria-label="Username" aria-describedby="basic-addon1" id="userName" @bind="@UserName" />
            <div class="input-group-append">
                <button type="submit" class="btn btn-secondary">Submit</button>
            </div>
        </div>
    </form>
    <form @onsubmit="SendMessageAsync">
        <label for="sendMessage" class="col-sm-3 col-form-label"></label>
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1">ðŸ’¬</span>
            </div>
            <input type="text" placeholder="Say something..." class="form-control" aria-label="SendMessage" aria-describedby="basic-addon1" id="sendMessage" @bind="@ChatMessage" />
            <div class="input-group-append">
                <button type="submit" class="btn btn-primary">Send</button>
            </div>
        </div>
    </form>
    <br />
    <div>
        <ul class="list-group">
            @foreach(var message in Enumerable.Reverse(_messages).Select((x, i) => new { Value = x, Index = i })) {
                <li class=@string.Format("list-group-item {0}", (message.Index % 2 == 0) ? "list-group-item-secondary" : "list-group-item-light")>
                    @if(message.Value.From == "#host") {
                        <p><span style="color:blue">Host </span> <small class="text-muted">@DateTimeOffset.UtcNow.ToString("HH:mm")</small> <br />@message.Value.Text</p>
                    } else {
                        <p><span style="color:maroon">@message.Value.From</span> <small class="text-muted">@DateTimeOffset.UtcNow.ToString("HH:mm")</small> <br />@message.Value.Text</p>
                    }
                </li>
            }
        </ul>
    </div>
} else {
    <h3>Connecting...</h3>
}

@code {

    //--- Types ---
    private class Config {

        //--- Properties ---
        public string ServerUri { get; set; }
    }

    //--- Fields ---
    private readonly List<UserMessageResponse> _messages = new List<UserMessageResponse>();
    private readonly WebSocketDispatch _websocketDispatch = new WebSocketDispatch();
    private Uri _serverUri;

    //--- Properties ---
    private string ChatMessage { get; set; }
    private string UserName { get; set; }

    private Uri ServerUri => string.IsNullOrEmpty(UserName)
        ? _serverUri
        : new Uri($"{_serverUri}?username={Uri.EscapeUriString(UserName)}");

    //--- Methods ---
    protected override async Task OnInitializedAsync() {
        var config = await Http.GetFromJsonAsync<Config>("config.json");
        _serverUri = new Uri(config.ServerUri);

        // attempt to restore user name from browser local storage
        var userName = await LocalStorage.GetItemAsync<string>("UserName");
        if(!string.IsNullOrEmpty(userName)) {
            Console.WriteLine($"Restored UserName from LocalStorage: {userName}");
            UserName = userName;
        } else {
            Console.WriteLine($"No previous UserName found");
        }

        // configure WebSocket
        _websocketDispatch.RegisterAction<UserMessageResponse>("message", ReceivedMessage);
        _websocketDispatch.RegisterAction<UserNameResponse>("username", ReceivedUserName);

        // attempt to connect to server
        _websocketDispatch.ServerUri = ServerUri;
        await _websocketDispatch.Connect();
    }

    private void ReceivedMessage(UserMessageResponse message) {
        Console.WriteLine($"Received from {message.From}: {message.Text}");
        _messages.Add(message);
        StateHasChanged();
    }

    private void ReceivedUserName(UserNameResponse username) {
        Console.WriteLine($"Received UserName: {username.UserName}");
        UserName = username.UserName;
        _websocketDispatch.ServerUri = ServerUri;
        StateHasChanged();
    }

    private async Task SendMessageAsync() {
        await _websocketDispatch.SendMessageAsync(new SendMessageRequest {
            Action = "send",
            Text = ChatMessage
        });
        ChatMessage = "";
    }

    private async Task RenameUserAsync() {
        await LocalStorage.SetItemAsync("UserName", UserName);
        await _websocketDispatch.SendMessageAsync(new RenameUserRequest {
            Action = "rename",
            UserName = UserName
        });
    }

    //--- IDisposable Members ---
    void IDisposable.Dispose() => _websocketDispatch.Dispose();
}